// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/28/2024 14:12:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Verilog1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Verilog1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [8:0] A;
reg [8:0] B;
reg Mult;
reg ON_OFF;
reg So;
reg Sub;
reg clk;
// wires                                               
wire [7:0] OP;
wire [17:0] R;
wire [8:0] RA;
wire [8:0] RB;

// assign statements (if any)                          
Verilog1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Mult(Mult),
	.ON_OFF(ON_OFF),
	.OP(OP),
	.R(R),
	.RA(RA),
	.RB(RB),
	.So(So),
	.Sub(Sub),
	.clk(clk)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b1;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// Mult
initial
begin
	Mult = 1'b0;
end 

// ON_OFF
initial
begin
	ON_OFF = 1'b1;
end 

// So
initial
begin
	So = 1'b1;
end 

// Sub
initial
begin
	Sub = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
endmodule

